id: ImageCropper
name: Image Cropper
description: <__trans phrase="Allows users to define a set of thumbnail prototypes that others can easily generate using a drag-and-drop image cropping tool.">
version: 1.0.26
schema_version: 8
l10n_class: ImageCropper::L10N
author_name: naoaki.onozaki
author_link: http://www.zelazny.mydns.jp/
plugin_link: https://github.com/naoaki011/mt-plugin-imagecropper

callbacks:
    MT::App::CMS::init_app: $ImageCropper::ImageCropper::Plugin::init_app
    MT::Asset::Image::post_remove: $ImageCropper::ImageCropper::Plugin::post_remove_asset

upgrade_functions:
    cropper_key_change:
        version_limit: 6
        priority: 1
        updater:
            type: thumbnail_prototype_map
            label: Updating Prototype Map keys...
            code: $ImageCropper::ImageCropper::Upgrade::prototype_map_key
    cropper_abbrev_tables:
        version_limit: 8
        priority: 5
        code: $ImageCropper::ImageCropper::Upgrade::AbbrevTables::run

config_settings:
  DefaultCroppedImageText: 
    default: 'Created by "Image Cropper"'

blog_config_template: tmpl/blog_config.tmpl

settings:
  cropped_text: 
    default: ''
    scope: blog
  default_compress:
    default: '7'
    scope: blog
  annotate_fontfamily:
    default: 'Helvetica'
    scope: blog
  annotate_fontsize:
    default: '10'
    scope: blog
tags:
  block:
    CroppedAsset: $ImageCropper::ImageCropper::Plugin::hdlr_cropped_asset
  function:
    ScaleThumbnailURL: $ImageCropper::ImageCropper::Plugin::hdlr_scale_thumbnail
    FillThumbnailURL: $ImageCropper::ImageCropper::Plugin::hdlr_fill_thumbnail
    CropThumbnailURL: $ImageCropper::ImageCropper::Plugin::hdlr_crop_thumbnail
    PrototypeVar: $ImageCropper::ImageCropper::Plugin::hdlr_var_prototype
object_types:
    thumbnail_prototype: ImageCropper::Prototype
    thumbnail_prototype_map: ImageCropper::PrototypeMap
applications:
  cms:
    menus: 
      prefs:image_cropper:
        label: Thumbnail Prototypes
        mode: list_prototypes
        order: 500
        permission: edit_templates
        view: blog
      design:image_cropper:
        label: Thumbnail Prototypes
        mode: list_prototypes
        order: 500
        permission: edit_templates
        view:
          - blog
          - website
        condition: $ImageCropper::ImageCropper::Util::is_mt5
      design:crop_prototypes:
        label: Crop Prototypes
        mode: list
        args:
          _type: thumbnail_prototype
        order: 500
        permission: edit_templates
        view:
          - blog
          - website
        condition: $ImageCropper::ImageCropper::Util::is_illiad
    methods:
      list_prototypes: $ImageCropper::ImageCropper::Plugin::list_prototypes
      edit_prototype: $ImageCropper::ImageCropper::Plugin::edit_prototype
      delete_prototype: $ImageCropper::ImageCropper::Plugin::del_prototype
      save_prototype: $ImageCropper::ImageCropper::Plugin::save_prototype
      manage_thumbnails: $ImageCropper::ImageCropper::Plugin::gen_thumbnails_start
      imagecropper_crop: $ImageCropper::ImageCropper::Plugin::crop
      imagecropper_delete_crop: $ImageCropper::ImageCropper::Plugin::delete_crop
    page_actions:
      asset:
        gen_thumbnails: 
          label: 'Generate Thumbnails'
          order: 100
          mode: manage_thumbnails
          permission: upload
          condition: $ImageCropper::ImageCropper::Util::asset_is_image
listing_screens:
  thumbnail_prototype:
    object_label: Crop Prototype
    object_label_plural: Crop Prototypes
    primary: label
    screen_label: Crop Prototypes
    default_sort_key: label
    view:
      - blog
      - website
    scope_mode: this
list_properties:
  thumbnail_prototype:
    id:
      label: ID
      auto: 1
      order: 100
      display: optional
    label:
      label: Label
      auto: 1
      order: 200
      display: force
      html: >
        sub {
          my ($prop, $obj, $app) = @_;
          my $editpath = $app->uri(
            mode => 'edit_prototype',
            args => {
              id => $obj->id,
              blog_id => $obj->blog_id,
            },
          );
          my $label = $obj->label;
          my $out = qq {
            <span><a href="$editpath">$label</a></span>
          };
          return $out;
        }
    max_width:
      label: Max Width
      auto: 1
      display: default
      order: 300
    max_height:
      label: Max Height
      auto: 1
      display: default
      order: 400
    created_by:
      label: Created By
      base: __virtual.author_name
      display: optional
      order: 500
    created_on:
      label: Created On
      auto: 1
      display: optional
      order: 600
  asset:
    label:
      auto: 1
      label: Label
      order: 200
      display: force
      sub_fields:
        -
          class: view
          label: View
          display: optional
      bulk_html: >
        sub {
          my $prop = shift;
          my ( $objs, $app ) = @_;
          my @userpics = MT->model('objecttag')->load(
            { blog_id           => 0,
              object_datasource => 'asset',
              object_id         => [ map { $_->id } @$objs ],
            },
            { fetchonly => { object_id => 1 },
              join      => MT->model('tag')->join_on(
                undef,
                { name => '@userpic',
                  id   => \'= objecttag_tag_id'
                }
              ),
            }
          );
          my %is_userpic = map { $_->object_id => 1 } @userpics;
          my @rows;
          for my $obj (@$objs) {
            my $id = $obj->id;
            my $label
              = MT::Util::remove_html( $obj->label
                || $obj->file_name
                || 'Untitled' );
            my $blog_id
              = $obj->has_column('blog_id') ? $obj->blog_id
              : $app->blog                  ? $app->blog->id
              :                             0;
            my $type      = $prop->object_type;
            my $edit_link = $app->uri(
              mode => 'view',
              args => {
                _type   => $type,
                id      => $id,
                blog_id => $blog_id,
              },
            );
            my $class_type = $obj->class_type;
            my $url = $obj->url;
            my $view = MT->translate('View');
            my $view_img = MT->static_path . 'images/status_icons/view.gif';
            require MT::FileMgr;
            my $fmgr      = MT::FileMgr->new('Local');
            my $file_path = $obj->file_path;

            my $croppath = $app->uri(
              mode => 'manage_thumbnails',
              args => {
                from => 'view',
                blog_id => $obj->blog_id,
                id => $obj->id,
                magic_token => $app->current_magic,
              },
            );
            my $id = $obj->id;
            my $crop = MT->translate('Crop');
            my $crop_img = MT->static_path . 'plugins/ImageCropper/images/crop.gif';
            my $parent = $obj->parent;

            ## FIXME: Hardcoded
            my $thumb_size = 45;
            my $userpic_sticker
              = $is_userpic{ $obj->id }
              ? q{<span class="inuse-userpic sticky-label">Userpic</span>}
              : '';
            if ( $file_path && $fmgr->exists($file_path) ) {
              my $img
                = MT->static_path
                . 'images/asset/'
                . $class_type
                . '-45.png';
              if ( $obj->has_thumbnail ) {
                my ( $orig_width, $orig_height )
                  = ( $obj->image_width, $obj->image_height );
                my ( $thumbnail_url, $thumbnail_width,
                  $thumbnail_height );
                if (   $orig_width > $thumb_size
                  && $orig_height > $thumb_size )
                {
                  (   $thumbnail_url, $thumbnail_width,
                    $thumbnail_height
                    )
                    = $obj->thumbnail_url(
                    Height => $thumb_size,
                    Width  => $thumb_size,
                    Square => 1
                    );
                }
                elsif ( $orig_width > $thumb_size ) {
                  (   $thumbnail_url, $thumbnail_width,
                    $thumbnail_height
                    )
                    = $obj->thumbnail_url(
                    Width => $thumb_size, );
                }
                elsif ( $orig_height > $thumb_size ) {
                  (   $thumbnail_url, $thumbnail_width,
                    $thumbnail_height
                    )
                    = $obj->thumbnail_url(
                    Height => $thumb_size, );
                }
                else {
                  (   $thumbnail_url, $thumbnail_width,
                    $thumbnail_height
                    )
                    = ( $obj->url, $orig_width,
                    $orig_height );
                }
                my $thumbnail_width_offset = int(
                  ( $thumb_size - $thumbnail_width ) / 2 );
                my $thumbnail_height_offset = int(
                  ( $thumb_size - $thumbnail_height ) / 2 );
                my $out;
                if ((!$parent)&&($class_type eq 'image')&&($obj->blog_id)) {
                  $out = qq{
                    <span class="title"><a href="$edit_link">$label</a></span>$userpic_sticker
                    <span class="view">&nbsp;<a href="$url"><img src="$view_img" alt="$view" /></a></span>
                    <span class="crop"><a href="$croppath"><img src="$crop_img" alt="$crop" /></a></span>
                    <div class="thumbnail picture small">
                      <img alt="" src="$thumbnail_url" style="padding: ${thumbnail_height_offset}px ${thumbnail_width_offset}px" />
                    </div>
                  };
                }
                else {
                  $out = qq{
                    <span class="title"><a href="$edit_link">$label</a></span>$userpic_sticker
                    <span class="view">&nbsp;<a href="$url"><img src="$view_img" alt="$view" /></a></span>
                    <div class="thumbnail picture small">
                      <img alt="" src="$thumbnail_url" style="padding: ${thumbnail_height_offset}px ${thumbnail_width_offset}px" />
                    </div>
                  };
                }
                push @rows, $out;
              }
              else {
                push @rows, qq{
                  <span class="title"><a href="$edit_link">$label</a></span>$userpic_sticker<span class="view">&nbsp;<a href="$url"><img src="$view_img" alt="$view" /></a></span>
                  <div class="file-type $class_type picture small">
                    <img alt="$class_type" src="$img" class="asset-type-icon asset-type-$class_type" />
                  </div>
                };
              }
            }
            else {
              my $img
                = MT->static_path
                . 'images/asset/'
                . $class_type
                . '-warning-45.png';
              push @rows, qq{
                <span class="title"><a href="$edit_link">$label</a></span>$userpic_sticker<span class="view">&nbsp;<a href="$url"><img src="$view_img" alt="$view" /></a></span>
                <div class="file-type missing picture small">
                  <img alt="$class_type" src="$img" class="asset-type-icon asset-type-$class_type" />
                </div>
              };
            }
          }
          @rows;
        }
    parent:
      auto: 1
      label: Parent AssetID
      order: 1100
      html: >
        sub {
          my ($prop, $obj, $app) = @_;
          my $editpath = $app->uri(
            mode => 'view',
            args => {
              _type => 'asset',
              blog_id => $obj->blog_id,
              id => $obj->parent,
            },
          );
          my $croppath = $app->uri(
            mode => 'manage_thumbnails',
            args => {
              from => 'view',
              blog_id => $obj->blog_id,
              id => $obj->parent,
              magic_token => $app->current_magic,
            },
          );
          my $id = $obj->parent;
          my $class_type = $obj->class_type;
          my $crop = MT->translate('Crop');
          my $crop_img = MT->static_path . 'plugins/ImageCropper/images/crop.gif';
          my $out = qq {
            <span><a href="$editpath">$id</a></span><span class="crop">&nbsp;<a href="$croppath"><img src="$crop_img" alt="$crop" /></a></span>
          };
          $out = '-' if ((!$id)||($class_type ne 'image'));
          return $out;
        }
list_actions:
  thumbnail_prototype:
    delete:
      label: Delete
      code: Common::delete
      mode: delete
      order: 100
      js_message: delete
      button: 1
content_actions:
  thumbnail_prototype:
    create_prototype:
      class: icon-create mt-open-dialog
      label: Create Crop Prototype
      mode: edit_prototype
      order: 200
